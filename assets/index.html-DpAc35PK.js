import{_ as l,o as t,c as r,d as s,a as o,e as n}from"./app-CR8Egssm.js";const e="/assets/image-20240610203617075-DeXgRnYy.png",a={},i=s('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>因为作为一个高中毕业，半道转行做 Java 开发的程序员，入行三年了竟然不了解为什么有这么多的开发语言，很不理解为什么说那些语言开发简单，为什么说某些领域适合使用什么语言；文章适合对编程有一点基础的初学者有些帮助，解答一些自己亲身经历思考的一些问题。以下结论通过<code>自己思考</code>和<code>ChatGPT</code>总结的一些理解。</p><p><img src="'+e+'" alt="image-20240610203617075"></p><h2 id="目前有哪些主流的后端编程语言、适合哪些领域" tabindex="-1"><a class="header-anchor" href="#目前有哪些主流的后端编程语言、适合哪些领域"><span>目前有哪些主流的后端编程语言、适合哪些领域？</span></a></h2><blockquote><p>首先我们先给出结论，后面再一个一个为什么。</p></blockquote><h4 id="_1-java" tabindex="-1"><a class="header-anchor" href="#_1-java"><span>1. <strong>Java</strong></span></a></h4><ul><li><strong>特性</strong>: 面向对象、平台无关（通过JVM）、强类型系统、丰富的标准库、强大的生态系统（如Spring框架）</li><li><strong>适用领域</strong>: 企业级应用、大型系统、金融服务、Android应用</li><li><strong>学习难度</strong>: 中等，需理解面向对象编程和JVM机制</li></ul><h4 id="_2-python" tabindex="-1"><a class="header-anchor" href="#_2-python"><span>2. <strong>Python</strong></span></a></h4><ul><li><strong>特性</strong>: 简洁易读的语法、动态类型、丰富的标准库、强大的数据处理和科学计算库（如Pandas、NumPy）</li><li><strong>适用领域</strong>: Web开发（如Django、Flask）、数据科学和机器学习（如TensorFlow、scikit-learn）、自动化脚本</li><li><strong>学习难度</strong>: 低到中等，非常适合初学者</li></ul><h4 id="_3-javascript-node-js" tabindex="-1"><a class="header-anchor" href="#_3-javascript-node-js"><span>3. <strong>JavaScript (Node.js)</strong></span></a></h4><ul><li><strong>特性</strong>: 单线程、非阻塞I/O、事件驱动、跨平台</li><li><strong>适用领域</strong>: Web开发、实时应用（如聊天应用、实时数据流）</li><li><strong>学习难度</strong>: 低到中等，特别适合已有前端开发经验的开发者</li></ul><h4 id="_4-ruby-ruby-on-rails" tabindex="-1"><a class="header-anchor" href="#_4-ruby-ruby-on-rails"><span>4. <strong>Ruby (Ruby on Rails)</strong></span></a></h4><ul><li><strong>特性</strong>: 动态类型、面向对象、简洁优雅的语法、快速开发框架（Rails）</li><li><strong>适用领域</strong>: Web开发、初创企业和MVP开发</li><li><strong>学习难度</strong>: 低到中等，Rails框架大大简化了Web开发</li></ul><h4 id="_5-php" tabindex="-1"><a class="header-anchor" href="#_5-php"><span>5. <strong>PHP</strong></span></a></h4><ul><li><strong>特性</strong>: 动态类型、嵌入HTML、广泛支持的Web服务器、丰富的Web开发库</li><li><strong>适用领域</strong>: Web开发、内容管理系统（如WordPress、Drupal）</li><li><strong>学习难度</strong>: 低，特别适合Web开发入门</li></ul><h4 id="_6-c" tabindex="-1"><a class="header-anchor" href="#_6-c"><span>6. <strong>C#</strong></span></a></h4><ul><li><strong>特性</strong>: 面向对象、强类型系统、丰富的标准库、与Windows生态系统的良好集成（如ASP.NET）</li><li><strong>适用领域</strong>: 企业级应用、Windows应用、游戏开发（如Unity引擎）</li><li><strong>学习难度</strong>: 中等，需理解.NET框架和面向对象编程</li></ul><h4 id="_7-go-golang" tabindex="-1"><a class="header-anchor" href="#_7-go-golang"><span>7. <strong>Go (Golang)</strong></span></a></h4><ul><li><strong>特性</strong>: 静态类型、编译型语言、内置并发支持（goroutines）、简单语法</li><li><strong>适用领域</strong>: 高性能网络服务、分布式系统、云计算</li><li><strong>学习难度</strong>: 中等到高，需理解并发编程</li></ul><h4 id="_8-scala" tabindex="-1"><a class="header-anchor" href="#_8-scala"><span>8. <strong>Scala</strong></span></a></h4><ul><li><strong>特性</strong>: 静态类型、运行在JVM上、支持面向对象和函数式编程、强大的并发支持（如Akka）</li><li><strong>适用领域</strong>: 大数据处理（如Apache Spark）、高并发系统</li><li><strong>学习难度</strong>: 高，需理解函数式编程和JVM机制</li></ul><h4 id="_9-c" tabindex="-1"><a class="header-anchor" href="#_9-c"><span>9. <strong>C</strong></span></a></h4><ul><li><strong>特性</strong>: 低级语言、手动内存管理、直接硬件访问、高效性能</li><li><strong>适用领域</strong>: 系统编程、嵌入式系统、操作系统、底层库开发</li><li><strong>学习难度</strong>: 高，需理解指针和手动内存管理</li></ul><h4 id="_10-c" tabindex="-1"><a class="header-anchor" href="#_10-c"><span>10. <strong>C++</strong></span></a></h4><ul><li><strong>特性</strong>: 面向对象、支持泛型编程、手动内存管理、高效性能、标准模板库（STL）</li><li><strong>适用领域</strong>: 游戏开发、系统编程、高性能应用、图形处理</li><li><strong>学习难度</strong>: 高，需理解复杂的语法和内存管理</li></ul><h2 id="为什么" tabindex="-1"><a class="header-anchor" href="#为什么"><span>为什么？</span></a></h2><h3 id="为什么要根据业务领域选择选择使用什么语言" tabindex="-1"><a class="header-anchor" href="#为什么要根据业务领域选择选择使用什么语言"><span>- 为什么要根据业务领域选择选择使用什么语言？</span></a></h3><blockquote><p>在开始学习的时候，就听说某个语言适合开发某个领域的开发，为什么呢？</p><p>记住一点：是先有的场景，后有的语言；也就是先有需求，才有了方案。</p><p>这也就解释了，为什么要根据业务领域选择选择使用什么语言。</p></blockquote><ol><li><p><strong>性能和扩展性需求</strong>:</p><p>某些业务领域可能需要高性能和可扩展性的解决方案，这时选择性能较好的编程语言如C++、Go等可能更为合适。</p></li><li><p><strong>生态系统和库支持</strong>:</p><p>不同的编程语言拥有不同的生态系统和库支持，某些业务领域可能需要特定领域的库或框架来简化开发流程，这时选择具有丰富生态系统的语言更为合适。</p></li><li><p><strong>开发效率和快速迭代</strong>:</p><p>对于需要快速迭代和开发效率的业务领域，选择具有简洁语法和丰富库支持的语言如Python、Ruby等可能更为合适。</p></li><li><p><strong>安全性和稳定性</strong>:</p><p>某些业务领域对安全性和稳定性要求较高，选择经过广泛测试和验证的语言如Java、C#等可能更为合适。</p></li><li><p><strong>并发和分布式需求</strong>:</p><p>对于需要处理大量并发请求或构建分布式系统的业务领域，选择具有良好并发支持的语言如Erlang、Go等可能更为合适。</p></li><li><p><strong>团队技能和经验</strong>:</p><p>最后，业务领域选择编程语言还应考虑团队成员的技能和经验，选择团队熟悉的语言可以提高开发效率和质量。</p></li></ol><h3 id="为什么说该语言就对该业务场景上做了好的优化" tabindex="-1"><a class="header-anchor" href="#为什么说该语言就对该业务场景上做了好的优化"><span>- 为什么说该语言就对该业务场景上做了好的优化？</span></a></h3>',30),p=o("blockquote",null,[o("p",null,"这些语言怎么就有这些特性，怎么证明这些特性真实存在，以及特性的瓶颈。"),o("p",null,"例如：我听说 GO 语言天生支持高并发，怎么证明其他语言的高并发做的就比其他语言好呢？"),o("p",null,[n("其实是有一些测试机构，去测试这些语言的这些特性，来验证是否像他自己描述的哪些特性的，例如："),o("a",{herf:"https://www.catchpoint.com/"},"TechEmpower Web Framework Benchmarks"),n("，用来测数据库、JSON序列化这些性能，还有很多，自己可以检索一下～")])],-1),g=s('<p>这个地方只能说在具体的代码上面做了处理，如需要详细了解，也是我们常说的<code>你读过源码</code>吗，自己去看被人的代码，理解别人的思想。</p><h4 id="补充" tabindex="-1"><a class="header-anchor" href="#补充"><span>补充</span></a></h4><p>自己可以写出好的代码，并且可以读懂别人的代码，也就是可以常说的<code>review</code>代码；无论别人写的好还是坏，这都是在提升自己对代码的理解能力。</p><p>之前前辈们经常说那时候的我不理解，现在开始慢慢懂了，希望你也可以～</p><hr><h3 id="怎么验证该语言确实在该业务场景做了显著优化" tabindex="-1"><a class="header-anchor" href="#怎么验证该语言确实在该业务场景做了显著优化"><span>- 怎么验证该语言确实在该业务场景做了显著优化？</span></a></h3><blockquote><p>评估和测试</p></blockquote><ol><li><p><strong>性能测试</strong>:</p><p>使用性能测试工具或自行编写性能测试代码来评估该语言在特定业务场景下的性能表现。可以关注响应时间、吞吐量、内存占用等指标，与其他语言进行对比。</p></li><li><p><strong>并发测试</strong>:</p><p>如果业务场景需要处理大量并发请求或构建高并发的系统，可以进行并发测试来评估该语言的并发处理能力。可以关注并发性能、资源管理等方面的指标。</p></li><li><p><strong>压力测试</strong>:</p><p>进行压力测试以评估该语言在负载增加的情况下的表现。可以模拟高负载情况下的业务场景，评估系统的稳定性和性能表现。</p></li><li><p><strong>实际应用评估</strong>:</p><p>将该语言应用于实际业务场景中，并监控系统的运行情况，收集数据进行评估。可以关注系统的稳定性、可维护性、开发效率等方面的指标。</p></li><li><p><strong>案例研究和经验分享</strong>:</p><p>参考其他企业或项目在相似业务场景下选择该语言并取得成功的案例，了解他们的经验和教训，对比自身情况进行评估。</p></li><li><p><strong>专家意见和技术评审</strong>:</p><p>寻求相关领域的专家或技术团队的意见，进行技术评审，评估该语言是否适合特定业务场景，并了解可能的优化策略。</p></li></ol><hr><h3 id="为什么一种语言在所有方面都做到最优" tabindex="-1"><a class="header-anchor" href="#为什么一种语言在所有方面都做到最优"><span>- 为什么一种语言在所有方面都做到最优？</span></a></h3><blockquote><p>语言的诞生，其实是根据当时需求背景，没有人可以预测未来，也就是我们前面说的先有需求，才有的方案；</p><p>设计语言的作者<code>一定一定</code>是尽可能的对语言做出最好的扩展。</p></blockquote><ol><li><p><strong>设计目标不同</strong>:</p><p>不同的编程语言可能追求不同的设计目标。例如，有些语言可能更注重开发效率和易用性，而有些语言可能更注重性能和可扩展性。因此，它们在特定领域的优化也会有所不同。</p></li><li><p><strong>适应领域需求</strong>:</p><p>某些编程语言可能更适合处理特定领域的需求，因此会在这些领域进行专门的优化。例如，Python 在科学计算和数据分析领域具有广泛应用，因此会在处理大数据集和科学计算方面进行优化。</p></li><li><p><strong>语言特性和生态系统</strong>:</p><p>每种编程语言都有其独特的语言特性和生态系统，这些特性和生态系统会影响到该语言在特定领域的优化。例如，Go 语言具有良好的并发支持，因此在构建高并发系统时会有专门的优化。</p></li><li><p><strong>开发者社区和实践经验</strong>:</p><p>不同的编程语言拥有不同的开发者社区和实践经验，这些社区和经验会影响到该语言在特定领域的优化。例如，Ruby on Rails 框架在 Web 开发领域有着丰富的实践经验和优化技巧。</p></li></ol><hr><h3 id="为什么有些语言被淘汰" tabindex="-1"><a class="header-anchor" href="#为什么有些语言被淘汰"><span>- 为什么有些语言被淘汰？</span></a></h3><blockquote><p>我认为是没有根据社会的时代变迁做出调整、行业需求的没落，语言自己本身放弃了自己，开发者有了更好的选择。</p></blockquote><ol><li><p><strong>技术过时</strong>:</p><p>一些编程语言可能在设计之初采用了过时的技术或思想，导致在后续发展中无法跟上技术的发展步伐。这些语言可能缺乏现代化的特性和功能，不再适应当下的开发需求。</p></li><li><p><strong>生态系统衰退</strong>:</p><p>编程语言的生态系统对于其长期发展至关重要。如果一个语言的生态系统衰退，意味着缺乏新的库、框架和工具支持，开发者可能会选择转向其他更具活力的语言。</p></li><li><p><strong>性能问题</strong>:</p><p>一些编程语言可能在性能方面存在问题，无法满足某些应用场景的需求。如果一个语言的性能无法满足现代应用的需求，开发者可能会选择更高效的替代方案。</p></li><li><p><strong>安全性问题</strong>:</p><p>编程语言的安全性也是一个重要考量因素。如果一个语言存在严重的安全漏洞或易受攻击，开发者可能会转向更安全的替代方案。</p></li><li><p><strong>缺乏社区支持和更新</strong>:</p><p>一个语言的长期发展需要一个活跃的开发者社区和持续的更新和维护。如果一个语言缺乏足够的社区支持或长期停滞不前，可能会被淘汰。</p></li><li><p><strong>技术替代</strong>:</p><p>有时候，一个编程语言被更先进、更适合当前技术趋势的替代方案取代。新的语言可能提供更现代化的特性、更高效的开发工具，吸引了原本使用旧语言的开发者。</p></li><li><p><strong>市场需求变化</strong>:</p><p>最后，市场需求的变化也可能导致一些编程语言被淘汰。如果一个语言无法满足当前市场的需求，开发者可能会选择转向更适应市场需求的替代方案。</p></li></ol><hr><h3 id="作为一个开发者如何选择语言" tabindex="-1"><a class="header-anchor" href="#作为一个开发者如何选择语言"><span>- 作为一个开发者如何选择语言？</span></a></h3><blockquote><p><code>兴趣</code>，<code>就业</code>，<code>收入</code>，<code>难易程度</code>，我认为这几个方面吧。</p></blockquote><ol><li><p><strong>项目需求</strong>:</p><p>首先要考虑的是项目的需求，包括项目类型、规模、预期用户量、功能需求等。不同的项目可能需要不同的编程语言来实现，因此需要根据项目需求来选择合适的语言。</p></li><li><p><strong>个人兴趣和技能</strong>:</p><p>个人兴趣和技能也是选择编程语言的重要因素。选择自己喜欢并且擅长的语言，能够提高学习和开发的效率，也能够更快地适应项目需求。</p></li><li><p><strong>生态系统和支持</strong>:</p><p>编程语言的生态系统和支持也是选择的考量因素。一个成熟、活跃的生态系统能够提供丰富的库、框架和工具支持，能够加速开发过程。此外，社区支持和文档资源也是一个重要考量因素。</p></li><li><p><strong>就业市场和趋势</strong>:</p><p>如果考虑到就业市场，可以关注一下不同编程语言的就业需求和趋势。选择具有较高需求的语言可能有助于提升就业竞争力。</p></li><li><p><strong>学习难度</strong>:</p><p>最后，也要考虑到编程语言的学习难度。一些语言可能比较容易学习，适合初学者入门；而一些语言可能较为复杂，需要更多的时间和精力去掌握。因此，要根据自己的学习能力和时间安排来选择合适的语言。</p></li></ol><hr><h3 id="跨领域是否需要换语言" tabindex="-1"><a class="header-anchor" href="#跨领域是否需要换语言"><span>- 跨领域是否需要换语言？</span></a></h3><blockquote><p>我认为看你的背景，什么语言都可以做，但是<code>新语言学习成本</code>还是<code>旧语言的开发效率</code>自己衡量一下，只要效率差不多的情况下，一般都是不会学习新的语言，当然大多数哦语言学习起来难度都还可以，前提是你已经熟练掌握了一门语言。毕竟设计语言的作者是想让更多的人<code>简单快速</code>的学习一门语言。</p></blockquote><ol><li><p><strong>领域特性</strong>:</p><p>不同的领域可能具有不同的需求和特性。如果新领域需要使用某种语言的特定特性或库来实现，可能需要考虑切换到该语言。</p></li><li><p><strong>技术栈的适应性</strong>:</p><p>如果新领域的技术栈与当前所用语言不兼容或者不够适应，可能需要考虑切换到适合的语言。例如，如果从前端开发转向数据科学领域，可能需要学习 Python 这样的数据科学语言。</p></li><li><p><strong>团队技能</strong>:</p><p>考虑到团队的整体技能和经验，如果团队成员对新领域所用语言不熟悉，可能需要进行培训或者切换到团队熟悉的语言。</p></li><li><p><strong>项目需求</strong>:</p><p>最重要的是要考虑项目的具体需求。如果当前所用语言能够满足项目需求，而且切换语言会带来较大的成本和风险，可能不需要换语言。</p></li><li><p><strong>时间和资源投入</strong>:</p><p>切换到新的语言需要投入时间和资源进行学习和适应。如果时间紧迫或者团队资源有限，可能需要权衡是否值得切换语言。</p></li></ol><hr><h3 id="语言的发展方向" tabindex="-1"><a class="header-anchor" href="#语言的发展方向"><span>- 语言的发展方向</span></a></h3><blockquote><p><code>简单</code>、<code>安全</code>、<code>功能全面</code>，显然很难，尽可能的吧。</p></blockquote><ol><li><p><strong>简洁性和易用性</strong>:</p><p>很多语言的宗旨是追求简洁易用的语法和语言特性，以提高开发效率和代码可读性。这意味着语言应该尽量避免冗余和复杂性，提供简洁清晰的语法和一致的编程模型。</p></li><li><p><strong>性能和效率</strong>:</p><p>许多语言致力于提供高性能和高效率的编程体验，以满足对于性能的需求。这可能涉及到对底层硬件的优化、并发和并行处理的支持、以及内存管理和资源利用的优化等方面。</p></li><li><p><strong>安全性和稳定性</strong>:</p><p>安全性和稳定性是编程语言发展的重要目标之一。语言应该提供强大的类型检查、内存安全性、异常处理机制等，以防止代码中的漏洞和错误，保障系统的稳定性和可靠性。</p></li><li><p><strong>灵活性和扩展性</strong>:</p><p>一些语言追求提供灵活性和扩展性，以满足不同领域和应用的需求。这可能包括支持多范式编程、元编程、动态语言特性等，以及提供丰富的库和框架支持。</p></li><li><p><strong>社区参与和开放性</strong>:</p><p>许多语言鼓励社区参与和开放性的开发过程，以促进创新和合作。这可能包括采用开源开发模式、提供开放的设计和规范、积极回应社区反馈等。</p></li><li><p><strong>跨平台和跨设备支持</strong>:</p><p>随着移动互联网和物联网的发展，越来越多的语言致力于提供跨平台和跨设备的支持，以满足不同平台和设备上的应用需求。</p></li></ol>',28),c=[i,p,g];function h(d,u){return t(),r("div",null,c)}const m=l(a,[["render",h],["__file","index.html.vue"]]),k=JSON.parse(`{"path":"/article/yh2hakrg/","title":"如何选择一门后端编程语言","lang":"zh-CN","frontmatter":{"title":"如何选择一门后端编程语言","author":"HiCheer","createTime":"2024/06/10 18:51:11","permalink":"/article/yh2hakrg/","head":[["script",{"id":"check-dark-mode"},";(function () {const um= localStorage.getItem('vuepress-theme-appearance') || 'auto';const sm = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;if (um === 'dark' || (um !== 'light' && sm)) {document.documentElement.classList.add('dark');}})();"],["script",{"id":"check-mac-os"},"document.documentElement.classList.toggle('mac', /Mac|iPhone|iPod|iPad/i.test(navigator.platform))"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"目前有哪些主流的后端编程语言、适合哪些领域？","slug":"目前有哪些主流的后端编程语言、适合哪些领域","link":"#目前有哪些主流的后端编程语言、适合哪些领域","children":[]},{"level":2,"title":"为什么？","slug":"为什么","link":"#为什么","children":[{"level":3,"title":"- 为什么要根据业务领域选择选择使用什么语言？","slug":"为什么要根据业务领域选择选择使用什么语言","link":"#为什么要根据业务领域选择选择使用什么语言","children":[]},{"level":3,"title":"- 为什么说该语言就对该业务场景上做了好的优化？","slug":"为什么说该语言就对该业务场景上做了好的优化","link":"#为什么说该语言就对该业务场景上做了好的优化","children":[]},{"level":3,"title":"- 怎么验证该语言确实在该业务场景做了显著优化？","slug":"怎么验证该语言确实在该业务场景做了显著优化","link":"#怎么验证该语言确实在该业务场景做了显著优化","children":[]},{"level":3,"title":"- 为什么一种语言在所有方面都做到最优？","slug":"为什么一种语言在所有方面都做到最优","link":"#为什么一种语言在所有方面都做到最优","children":[]},{"level":3,"title":"- 为什么有些语言被淘汰？","slug":"为什么有些语言被淘汰","link":"#为什么有些语言被淘汰","children":[]},{"level":3,"title":"- 作为一个开发者如何选择语言？","slug":"作为一个开发者如何选择语言","link":"#作为一个开发者如何选择语言","children":[]},{"level":3,"title":"- 跨领域是否需要换语言？","slug":"跨领域是否需要换语言","link":"#跨领域是否需要换语言","children":[]},{"level":3,"title":"- 语言的发展方向","slug":"语言的发展方向","link":"#语言的发展方向","children":[]}]}],"isBlogPost":true,"readingTime":{"minutes":14.35,"words":4304},"git":{"updatedTime":1718065392000,"contributors":[{"name":"HiCheer-O","email":"chendangdang1998@gmail.com","commits":2}]},"filePathRelative":"博客/后端/如何选择一门后端编程语言.md","categoryList":[{"type":10002,"name":"博客"},{"type":10003,"name":"后端"}]}`);export{m as comp,k as data};
